

# SQLAlchemy connection URL (uses the docker-compose service name "postgres")
# DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:5432/${POSTGRES_DB}"

# Secrets & internal auth
ENCRYPTION_KEY=...

# HS256 signing secret for test JWTs (dev only). Use JWKS/RS256 in production.
JWT_SECRET="secret"

# Google OAuth / APIs
GOOGLE_CLIENT_SECRETS_FILE="client_secret.json"
#GOOGLE_CLIENT_ID=519447147425-i8j4dncrgmg4cnjulsehc5if03shvsib.apps.googleusercontent.com
#GOOGLE_CLIENT_SECRET=...
# Client credentials
# GOOGLE_CLIENT_ID=...
# GOOGLE_CLIENT_SECRET=...

GOOGLE_REDIRECT_URI="http://localhost:8765/callback"

# Optional: desktop OAuth client file for local/manual flows (no mobile).
DESKTOP_CLIENT_SECRETS=C:/Users/carmo/PycharmProjects/EpansaAuth/client_secret_desktop.json

# Neo4j (graph database)
NEO4J_USER=neo4j
NEO4J_PASSWORD=password

# Bolt driver URL (uses the docker-compose service name "neo4j").
#NEO4J_URI="bolt://neo4j:7687"
NEO4J_URI="bolt://localhost:7687"

# Worker settings
API_BASE_URL="http://api:5000/"

# LLM-Graph-Builder
TOKENS_PER_CHUNK=300                     #token chunk size
CHUNK_OVERLAP=20
NUMBER_OF_CHUNKS_TO_COMBINE=3
MAX_TOKEN_CHUNK_SIZE=500000               #Max token used to process/extract the file content (if the file is bigger, truncation is applied)
WORDS_FOR_BIG_FILE=300                   #n. of words to consider a file as big file and not process fully for entity extraction (only chunks nodes)

GROQ_API_KEY=...
KG_EXTRACTION_MODEL_NAME=openai/gpt-oss-120b
AGENT_MODEL_NAME=qwen/qwen3-32b
LLM_MODEL_CONFIG=groq,openai/gpt-oss-120b,https://api.groq.com,${GROQ_API_KEY}

GEMINI_API_KEY=...
#COMMUNITIES_LLM_MODEL_CONFIG=gemini,gemini-flash-lite-latest,_,${GEMINI_API_KEY}

COMMUNITIES_LLM_MODEL_CONFIG=huggingface,Qwen/Qwen3-0.6B,_,_